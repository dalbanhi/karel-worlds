// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                String       @id @default(uuid())
  clerkUserId       String       @unique
  email             String       @unique
  username          String       @unique
  role              Role
  onboardingComplete Boolean      @default(false)
  name              String?
  imageUrl          String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  puzzlesCreated    Puzzle[]     @relation("PuzzlesCreated")
  puzzlesLiked      Puzzle[]     @relation("PuzzlesLiked")
  puzzlesSolved     Puzzle[]     @relation("PuzzlesSolved")
  collections       Collection[] @relation("CollectionsCreated")
  classroomsManaged Classroom[]  @relation("ClassroomsManaged")
  classrooms        Classroom[]  @relation("ClassroomsAttended")

  @@map("users")
}

model Puzzle {
  id            String         @id @default(uuid())
  name          String
  description   String
  worldWidth    Int
  worldHeight   Int
  hints         String[]
  karelImage    String
  beeperImage   String
  wallImage     String
  rating        Float
  difficulty    Float
  backgroundImage String
  startWorldInfo  Json
  goalWorldInfo   Json
  creator       User           @relation("PuzzlesCreated", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
  likedBy       User[]         @relation("PuzzlesLiked")
  solvedBy      User[]         @relation("PuzzlesSolved")
  collections   Collection[]   @relation("CollectionsBelongingTo")
  tags      Tags[] @relation("PuzzleTags")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  @@index([creatorId], name: "creatorId")
  @@map("puzzles")
}

model Tags{
  id String @id @default(uuid())
  name String @unique
  puzzles Puzzle[] @relation("PuzzleTags")
  @@map("tags")
}

model Collection {
  id        String   @id @default(uuid())
  name      String
  puzzles   Puzzle[] @relation("CollectionsBelongingTo")
  creator   User     @relation("CollectionsCreated", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  createdAt DateTime @default(now())
  classrooms Classroom[] @relation("ClassroomsBelongingTo")

  @@map("collections")
}

model Classroom {
  id        String   @id @default(uuid())
  name      String
  teacher   User     @relation("ClassroomsManaged", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
  students  User[]   @relation("ClassroomsAttended")
  collections Collection[] @relation("ClassroomsBelongingTo")
  createdAt DateTime @default(now())

  @@map("classrooms")
}

enum Role {
  TEACHER
  STUDENT
}